Prototypical Inheritance:
- Review __proto__, #prototype, up the prototype chain
- Prototype is an instance of the Object class, constructor is object
- Ways to do inheritance
	a. Class_1.prototype = Class_2.prototype, boom, prototypical inheritance!
	b. Object.create(Class.prototype)
	c. extends

webpack --watch root.js bundle.js -> That was pretty cool
#hasOwnProperty('etc)
The end of a proto chain is null

Ways to do
	a. let Surrogate = function() {}
			Surrogate.prototype = ClassToInheritFrom.prototype;
			ClassYouWantToInherit.prototype = new Surrogate();
		REASON for surrogate is so etc constructor function isn't run. So empty
		surrogate instead...
		Inside of regular constructor, do ClassToInheritFrom.call(this, ...args);
		ClassYouWantToInherit.prototype.constructor = ClassYouWantToInherit

Don't do two things at once, give a single task your full attention. *****
------------------------------------------------------------------------
Javascript in Browser:
- script src tags
- script src bundle.js, can still use require and module.exports syntax
	a. Or import/export for ES6 ( Doesn't matter)
- webpack (root of tree of files) bundle.js
	a. Nothing gets put in global namespace

Prototypical Inheritance again:
- Object is the top level class, proof: Object.prototype.__proto__ === null
"Now you might be wondering why we don't just call Dog.prototype = Animal.prototype.
 We don't do this because that means any function added to Dog would also be added
 to Animal."
"anything that alters the prototype of an object will lead to very poor performance.
For these reasons we don't want to use __proto__ to manage inheritance."
- Object.setPrototypeOf also shouldn't be used, performance hits bc of altering
	an object's prototype.
- Workaround is to create an entirely new prototype object
	a. Object.create
		- Dog.prototype = Object.create(Animal.prototype);
		- Dog.prototype.constructor = Dog
		- Inside Dog constructor: Animal.call(this, name) (Basically using super)
			- It's running the Animal initilization logic on the current dog instance
		- Currently the recommended way to establish prototypical inheritance
- Another method is the old Surrogate trick
	a. It's covered above in the beginning of the notes, review there.
- New way in ES6
	a. Basically just use extends, which is syntactic sugar
	b. Can access overwritten parent's class functions using super w/ parameters
	c. can also use super.methodName()
-----------------------------------------------------------------------
- If you require modules in front-end Javascript, must do everything in order
because if browsers execute HTML top down. Must be wary of dependencies.
- Browser has single namespace called window shared across all js files
- Use module bundlers instead!
	a. Run thru all source files and bundle into a single file
	b. It requires its dependencies explicitly then exports the obj it's responsible for
	c. Does via abstract syntax tree
	d. Don't need to worry about order, and you can only export only objs you want,
		same syntax as node
	e. Webpack is the module bundler we'll be using
		- npm install -g webpack webpack-cli
		- webpack app.js -o bundle.js --mode=development
		  a. Webpack will find any file named app.js in current directory and bundle
				it w/ any files it requires and output to bundle.js, mode flag tells to
				optimize for developemtn rather than production.
			b. html file would have <script src="bundle.js"></script>
-----------------------------------------------------------------------------
https://joshondesign.com/p/books/canvasdeepdive/chapter01.html
- Basic drawing using Canvas in the browser
- All it does is draw pixels to the screen, huh that's like 42's graphic library
SVG -> existing shapes
CSS or DOM -> large static areas or 3d transforms
Canvas -> charts/graphs/dynamic diagrams/video games
Canvas 2D api, there is also a 3D api in the works called WebGL.
That's pretty cool-- will review in future if I plan to make a browser game.

Quiz
- Review of spread operator
- fillStyle
- module bundler
- __proto__ points to obj used in lookup chain
- prototype is an obj that stores property/methods that will be inherited
	by objects further down the chain
- an instance points to class's prototype
--------------------------------------------------------------------------
Asynchronous Client-Side Code:
e.g setInterval, when JS code is being run, stops browser from doing other things
like running other JS codes, making requests, rendering HTML, scrolling, etc
- Browser provides that functionality thru web APIs
- requestAnimationFrame > setInterval, jus executes function when browser is ready,
	inside callback should call requestAnimationFrame

Closet thing to gets in Ruby is prompt(), BUT DO NOT USE IT.
- It pops up an input box for user to type in text and blocks entire page
	until they do...

Asynchronous solution:
- register(bind) a function(handler) to be called by browser when an event occurs
- e.g #onclick
- JS asks browser to notify us of events -> listen for etc event -> browser
	calls any JS code that has been registered as handler when event occurs
--------------------------------------------------------------------------
Client-side Javascript:
- JS for browser to execute
- Browsers and Node.js are JS runtimes/environments
	a. expose functionality that JS scripts can access thru APIs
- document.getElementById("")....
- File IO nor DOM manipulation are part of Javascript, they are functionalities
	provided by environment

What to do for non-ES6 compatible browsers?
- Ignore them (not viable for production)
- polyfill, aka test for existence of a certain function and provide a hand-spun ver
- Transpile to ES5 using tools like Babel
-------------------------------------------------------------------------
Webpack Tutorial: All these can be set in the config file
https://webpack.js.org/concepts/
- entry point indicates which module webpack should use to begin building out its
	internal dependency graph. default: ./src/index.js
- output property tells webpack where to emit the bundles it creates and how to
	name these files. default: ./dist/main.js
- loader: 2 properties
	a. The test property identifies which file or files should be transformed.
	b.The use property indicates which loader should be used to do the transforming.
- plugins: extend Webpack capabilitie
	a. require() to add it to the plugins array, customizable thru options
	b. can create an instance of plugin using new operator
- mode: can optimize for a particular environment or none
- supports all browsers that are ES-5 compliant and above

- Better to install webpack locally rather than globally, easier to
	upgrade projects individually
	a. npm uninstall -g webpack
- To locally install
	a. npm init -y
	b. npm install webpack webpack-cli --save-dev
	c. in package.json, mark package private and remove the main entry (webpack)
	d. notice directory structure: src code and dist code separate
	e. If you wish to bundle external module dependencies, install it locally
		e.g npm install --save lodash (this is used for production bundle)
		- If for development, use npm install --save-dev
	f. npx webpack
	g. webpack supports import/export out of the box, supports config files as well
		- webpack.config.js
		- npx webpack --config webpack.config.js (the end is unnecessary bc it does by default)
	h. Can set up npm scripts in config file
		- e.g npm run build
	i. https://webpack.js.org/guides/asset-management/ -> for CSS, images, etc...
----------------------------------------------------------------------------
Canvas:
- canvas element has default width 300px and height 150px
- addEventListener(), "DOMContentLoaded" to wait for page to be loaded then look
- grab canvas element -> set height/width -> ctx = the_canvas.getContext('2d')
- Do everything on ctx!
https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations
Basic animations! That's actually really cool.
--------------------------------------------------------------------------
Another css review:
border-radius, content, position, transform, how to make triangles, overflow,
letter-spacing, text-transform, box-shadow

overflow:hidden alone was enough, didn't need to set the height.
Making triangles in CSS is kind of a pain... but I guess it's good
practice regardless.
-----------------------------------------------------------------------
Know how to use arguments and the ... rest operator
Be able to set the context of a function in multiple ways
Be able to write currying functions
Be able to explain how currying works
Know how to combine arguments from different calls of a curried function

Both this and arguments are reset on every function invocation

- Functional programming paradigm - focuses on function composition (writing
	functions which are givena function as arg and return a new function)
	a. Pattern: currying, decomposing a function that takes several arguments
		into one that takes single arguments successively until it has the
		sufficient number of arguments to run
	b. curry functions are pretty damn cool and useful

Remember that Es6 arrow functions don't have its own "this", the enclosing
execution context is used. If you used regular function for the internal
function, you would have had to store "this" to a variable in the outer
function then use it in the inner, like "that" or a more descriptive name.
-----------------------------------------------------------------------
Be able to write and explain Function.prototype.inherits
Know what a Surrogate class does and why we need it
Know what the constructor property does
Know what __proto__ is
Know what new does
Know what Object.create does
Know how to test an inheritance implementation
--------------------------------------------------
Be able to implement prototypal inheritance to give a class another class's methods and attributes
Be able to include JavaScript in a web page
Know how Webpack works
Know how to test JavaScript code using window.x = x
Know how to render information from JavaScript objects on a page
Know how to draw on a web page using Canvas

Handicap: No using ES6 class syntax as it's syntactic sugar

Vectors: 2D vectors have x / y.
Position vector: has x and y position
Velocity vector: has a speed in x and y directions

Distance formula:
- sqrt ( (x2 - x1)^2 + (y2 - y1)^2 )

- Vector norm: aka, magnitude or length. Norm of velocity vector is speed
	a. Calculate it using the distance formula

"npx webpack --watch --mode=development" after doing setup steps
- This creates a dist/main.js that loads index.js file, any file it requires,
	and any file those files require. Remember that index.js is the entry file
	for running the project!

export -> require -> declare on window

https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event#Example
Events!

for (let key in obj) is pretty damn useful as well, so is JSON.stringify...
== to check if two objects are the same object

https://github.com/madrobby/keymaster
